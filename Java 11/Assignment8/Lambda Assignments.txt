Q1.
import java.util.Scanner;

interface Add
{
	public double addition(int num1,int num2);
}

interface Sub
{
	public double subtraction(int num1,int num2);
}

interface Multi
{
	public double multiplication(int num1,int num2);
}

interface Div
{
	public double division(int num1,int num2);
}
public class Assignment8Q1 {
    public static void main(String[] args) {
    	Scanner scan=new Scanner(System.in);
    	
    	int a,b;
    	a=scan.nextInt();
    	b=scan.nextInt();
    	
    	Add Addition=(int x, int y)->{ return x+y; };
		System.out.println(Addition.addition(a,b));
		
		Sub Subtraction=(int x, int y)->{ return x-y; };
		System.out.println(Subtraction.subtraction(a, b));
		
		Multi Multiplication=(int x, int y)->{ return x*y; };
		System.out.println(Multiplication.multiplication(a, b));
		
		Div Division=(int x, int y)->{ return (double)x/y;};
		System.out.println(Division.division(a, b));
    }
}

Q2.

import java.util.ArrayList;
import java.util.Iterator;

public class Assignment8Q2 {

    private int totalPrice;
    private String status;
    
    public Assignment8Q2(int price, String status)
    {
    	this.totalPrice=price;
    	this.status=status;
    }
    
    public int getPrice()
    {
    	return this.totalPrice;
    }
    
    public void setPrice(int price)
    {
    	this.totalPrice=price;
    }
    
    public String getStatus()
    {
    	return this.status;
    }
    
    public void setStatus(String status)
    {
    	this.status=status;
    }

    public static ArrayList<Assignment8Q2> listOfOrders(ArrayList<Assignment8Q2> orders) 
    {
    	Iterator<Assignment8Q2> iterator=orders.iterator();
    	while(iterator.hasNext())
    	{
    		Assignment8Q2 order=iterator.next();
    		if(order.getPrice()>10000 || order.getStatus().equals("Accepted/Completed")) {}
    	    else
    	    {
    	    	iterator.remove();
    	    }
    	}
		return orders;
	}
    public static void main(String[] args) {
    	Assignment8Q2 order1=new Assignment8Q2(2000,"Processing");
    	Assignment8Q2 order2=new Assignment8Q2(10000,"Processing");
    	Assignment8Q2 order3=new Assignment8Q2(6000,"Accepted/Completed");
    	Assignment8Q2 order4=new Assignment8Q2(4500,"Processing");
    	Assignment8Q2 order5=new Assignment8Q2(12000,"Accepted/Completed");
    	Assignment8Q2 order6=new Assignment8Q2(18000,"Processing");
    	
    	ArrayList<Assignment8Q2> orders=new ArrayList<Assignment8Q2>();
    	orders.add(order1);
    	orders.add(order2);
    	orders.add(order3);
    	orders.add(order4);
    	orders.add(order5);
    	orders.add(order6);
    	
    	orders=listOfOrders(orders);
    	
    	
    	orders.forEach((order) -> { System.out.println(order.getStatus()+" "+order.getPrice()); });
    }
}



Q3.
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.Supplier;

public class Assignment8Q3 {
	static Product product=new Product("Brush");
    
	static void modifyValue()
    { 
    	Consumer<Product> updateName = a -> a.setName("ToothBrush");
    	updateName.accept(product);
    }
    
    static class Product {
    	String name;
    	Product(String name)
    	{
    		this.name=name;
    	}
    	public void setName(String name)
    	{
    		this.name=name;
    	}
    	public String getName()
    	{
    		return this.name;
    	}
    }
    
    static void display() 
    {
    	System.out.println(product.getName()); 
    	
    	Supplier<Integer> supplier = () -> new Integer((int) (Math.random() * 1000D));
    	System.out.println(supplier.get());
    	
    	Function<Integer, Integer> adder = (value) -> value * 3;
    	Integer resultLambda = adder.apply(8);
    	System.out.println("resultLambda = " + resultLambda);
    	
    	Predicate<String> predicate = (value) -> value.length()>5;
    	System.out.println(predicate.test(product.getName()));
    }
    
    public static void main(String[] args) {
    	modifyValue();
    	display();
    }
}


Q4.
import java.util.ArrayList;

public class Assignment8Q4 {
    public ArrayList<String> removeOddLength(ArrayList<String> employeeList){
    	employeeList.removeIf(s->(s.length()%2 !=0));
    	return employeeList;
    }
    public static void main(String[] args) {
    	
    }
}


Q5.

import java.util.Arrays;
import java.util.List;
import java.util.function.Consumer;

public class Assignment8Q5 {
    static List<String> list = Arrays.asList("alpha", "bravo", "charlie", "delta", "echo", "foxtrot");
        
    public static String processWords(List<String> list, Consumer<List<String>> c)
    {
    	c.accept(list);
    	return list.toString();
    }

    public static void main(String[] args) {
    	Consumer<List<String>> c= lis ->
	   	 {
		   	for(int i=0;i<lis.size();i++)
		   	{
		   		String word=list.get(i);
		   		lis.set(i, ""+word.charAt(0));
		   	}
	   	 };
	   	System.out.println(processWords(list, c));
	   	 
    	
    }

    
}


Q6.

import java.util.List;

public class Assignment8Q6 {
    public static void main(String[] args) {
    	
    }
    public List<String> convertToUpperCase(List<String> list) {
    	list.replaceAll(s->s.toUpperCase());
    	return list;
    }  
}



Q7.
import java.util.HashMap;

public class Assignment8Q7 {
    public static void main(String[] args) {
    	
    }
    public String convertKeyValueToString(HashMap<String, Integer> map) {
    	StringBuilder res = new StringBuilder();
    	for(HashMap.Entry<String,Integer> mp:map.entrySet()) {
    		res.append(mp.getKey()+mp.getValue());
    	}
    	return res.toString();
    }
}


Q8.
import java.util.ArrayList;
import java.util.List;
import java.util.function.Consumer;

 public class Assignment8Q8 implements Runnable {
	static void printList(List<Integer> list) {
		for(Integer i : list) {
			System.out.println(i);
		}
	}

	public static void main(String[] args) {
		
		Assignment8Q8 ob = new Assignment9Q8();
		Thread t = new Thread(ob);
		t.start();
	}

	@Override
	public void run() {
		
		List<Integer> list = new ArrayList<>();
		list.add(10);
		list.add(11);
		list.add(112);
		list.add(8);
		list.add(6);
		Consumer<List<Integer>> consu = Assignment8Q8::printList;
		consu.accept(list);
	}

}